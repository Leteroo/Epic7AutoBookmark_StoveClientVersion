# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt6 UI code generator 6.1.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is run again.
# Do not edit this file unless you know what you are doing.

import sys
import time
import mss
import aircv
import win32gui
from PyQt6 import QtCore, QtGui, QtWidgets

sys.path.append("./api")

from CVWindow import Window
from WindowsOperation import Common


_hwnd = None
_restrict_width = 800
_restrict_height = 600
# 目標到購買按鍵的距離
_distance_under_800_600_w = 360

''' 待拆成 config '''
e7_language = "zh-tw"
e7_window_name = "第七史诗"
# 書籤
friend = aircv.imread(f"./img/friendLocation.png")
covenant = aircv.imread("./img/covenantLocation.png")
mystic = aircv.imread("./img/mysticLocation.png")
# 按鈕
buyButton = aircv.imread(f"./img/buyButton-{e7_language}.png")
refreshButton = aircv.imread(f"./img/refreshButton-{e7_language}.png")
refreshYesButton = aircv.imread(f"./img/refreshYesButton-{e7_language}.png")
restartDispatchButton = aircv.imread(f"./img/restartDispatchButton-{e7_language}.png")


''' 找到 EPIC7 的客戶端視窗，這邊會需要系統管理員權限 '''
def get_window():
    global _hwnd
    _hwnd = win32gui.FindWindow(None, e7_window_name)
    if not _hwnd:
        print("找不到視窗!")
        return

    ''' 判斷是否為正常大小，不是的話復原(系統權限禍首) '''
    flag, show_cmd, min_pos, max_pos, nor_pos = win32gui.GetWindowPlacement(_hwnd)
    if show_cmd != Common.show_cmd["normal"]:
        print("restore window")
        win32gui.ShowWindow(_hwnd, Common.show_cmd["restore"])
        time.sleep(0.1)
    print("window_position:", nor_pos)

    ''' 取得視窗內部尺寸 '''
    inner_size = win32gui.GetClientRect(_hwnd)
    print("inner_size:", inner_size)

    ''' 內部視窗的原點 '''
    left, top, width, height = Common.get_correct_origin_of_inner_window(nor_pos, inner_size)

    ''' 限制視窗為 800*600，實際上會更小一點，因為客戶端有綁視窗比例 '''
    if width != _restrict_width or height != _restrict_height:
        win32gui.MoveWindow(_hwnd, nor_pos[0], nor_pos[1], _restrict_width, _restrict_height, True)

    ''' 置頂與取消置頂(系統權限禍首-2) '''
    # if not Common.check_topmost(_hwnd):
    #     print("topmost")
    #     Common.topmost(_hwnd)
    # time.sleep(3)
    # print("dis topmost")
    # Common.dis_topmost(_hwnd)

    window = Window("Test", _restrict_width, _restrict_height)
    monitor = Window.create_monitor(left, top, _restrict_width, _restrict_height)

    return (left, top), window, monitor

def get_number(text):
    return int(text) if text.isdigit() else 0

class Ui_Part:
    def __init__(self):
        self._constants()

    # 需要實作的 event
    def start_button_event(self):
        pass

    def setupUi(self, root: QtWidgets):
        root.setObjectName("widget")
        root.resize(*self._WINDOW_SIZE)
        root.setMinimumSize(self._MINIMUM)
        root.setMaximumSize(self._MAXIMUM)
        root.setFont(self._set_Qfont("微軟正黑體", 12))

        self.tabWidget = QtWidgets.QTabWidget(root)
        self.tabWidget.setMinimumSize(QtCore.QSize(300, 490))
        self.tabWidget.setMaximumSize(QtCore.QSize(300, 490))
        self.tabWidget.setStyleSheet("")
        self.tabWidget.setFont(self._set_Qfont("微軟正黑體", 12))
        self._set_Geo_and_Name(self.tabWidget, (5, 5, 300, 490), "tabWidget")

        self.tabWidget.addTab(self._set_function_tab(), "")
        self.tabWidget.addTab(self._set_introduction_tab(), "")

        self._retranslateUi(root)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(root)

    def _set_function_tab(self):
        self.functionTab = QtWidgets.QWidget()
        self.functionTab.setMinimumSize(QtCore.QSize(300, 490))
        self.functionTab.setMaximumSize(QtCore.QSize(300, 490))
        self.functionTab.setFont(self._set_Qfont("微軟正黑體", 12))
        self.functionTab.setObjectName("functionTab")

        # 金幣標籤
        self.moneyTextShowLabel = QtWidgets.QLabel(self.functionTab)
        self.moneyTextShowLabel.setFont(self._set_Qfont("微軟正黑體", 12))
        self._set_Geo_and_Name(self.moneyTextShowLabel, (40, 10, 60, 20), "moneyTextShowLabel")

        # 金幣輸入
        self.moneyTotalShowEdit = QtWidgets.QLineEdit(self.functionTab)
        self.moneyTotalShowEdit.setLayoutDirection(QtCore.Qt.LayoutDirection.RightToLeft)
        self.moneyTotalShowEdit.setAlignment(self._LINEEDIT_STYLE)
        self.moneyTotalShowEdit.setFont(self._set_Qfont("微軟正黑體", 12))
        self._set_Geo_and_Name(self.moneyTotalShowEdit, (120, 10, 111, 20), "moneyTotalShowEdit")

        # 天空石標籤
        self.stoneTextShowLabel = QtWidgets.QLabel(self.functionTab)
        self.stoneTextShowLabel.setFont(self._set_Qfont("微軟正黑體", 12))
        self._set_Geo_and_Name(self.stoneTextShowLabel, (40, 40, 60, 20), "stoneTextShowLabel")

        # 天空石輸入
        self.stoneTotalShowEdit = QtWidgets.QLineEdit(self.functionTab)
        self.stoneTotalShowEdit.setLayoutDirection(QtCore.Qt.LayoutDirection.RightToLeft)
        self.stoneTotalShowEdit.setAlignment(self._LINEEDIT_STYLE)
        self.stoneTotalShowEdit.setFont(self._set_Qfont("微軟正黑體", 12))
        self._set_Geo_and_Name(self.stoneTotalShowEdit, (120, 40, 111, 20), "stoneTotalShowEdit")

        # 分隔線
        self.divider = QtWidgets.QFrame(self.functionTab)
        self.divider.setFrameShape(QtWidgets.QFrame.Shape.HLine)
        self.divider.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self._set_Geo_and_Name(self.divider, (10, 65, 271, 20), "divider")

        # 自動重新派遣
        self.autoRestartDispatchCheckbox = QtWidgets.QCheckBox(self.functionTab)
        self._set_Geo_and_Name(self.autoRestartDispatchCheckbox, (40, 90, 150, 21), "autoRestartDispatchCheckbox")
        self.autoRestartDispatchCheckbox.setChecked(False)

        # 聖約書籤 Button
        self.covenantRadioButton = QtWidgets.QRadioButton(self.functionTab)
        self._set_Geo_and_Name(self.covenantRadioButton, (40, 130, 91, 21), "covenantRadioButton")
        self.covenantRadioButton.setChecked(True)

        # 聖約書籤標籤
        self.covenantTimeLabel = QtWidgets.QLabel(self.functionTab)
        self._set_Geo_and_Name(self.covenantTimeLabel, (220, 130, 20, 20), "covenantTimeLabel")

        # 聖約書籤輸入
        self.covenantInput = QtWidgets.QLineEdit(self.functionTab)
        self.covenantInput.setLayoutDirection(QtCore.Qt.LayoutDirection.RightToLeft)
        self.covenantInput.setAlignment(self._LINEEDIT_STYLE)
        self.covenantInput.setFont(self._set_Qfont("微軟正黑體", 12))
        self._set_Geo_and_Name(self.covenantInput, (140, 130, 70, 20), "covenantInput")

        # 神秘書籤 Button
        self.mysticRadioButton = QtWidgets.QRadioButton(self.functionTab)
        self._set_Geo_and_Name(self.mysticRadioButton, (40, 170, 91, 21), "mysticRadioButton")

        # 神秘書籤標籤
        self.mysticTimeLabel = QtWidgets.QLabel(self.functionTab)
        self._set_Geo_and_Name(self.mysticTimeLabel, (220, 170, 20, 20), "mysticTimeLabel")

        # 神秘書籤輸入
        self.mysticInput = QtWidgets.QLineEdit(self.functionTab)
        self.mysticInput.setLayoutDirection(QtCore.Qt.LayoutDirection.RightToLeft)
        self.mysticInput.setAlignment(self._LINEEDIT_STYLE)
        self.mysticInput.setFont(self._set_Qfont("微軟正黑體", 12))
        self._set_Geo_and_Name(self.mysticInput, (140, 170, 70, 20), "mysticInput")

        # 天空石 Button
        self.stoneRadioButton = QtWidgets.QRadioButton(self.functionTab)
        self._set_Geo_and_Name(self.stoneRadioButton, (40, 210, 91, 21), "stoneRadioButton")

        # 天空石標籤
        self.stoneTimeLabel = QtWidgets.QLabel(self.functionTab)
        self._set_Geo_and_Name(self.stoneTimeLabel, (220, 210, 20, 20), "stoneTimeLabel")

        # 天空石輸入
        self.stoneInput = QtWidgets.QLineEdit(self.functionTab)
        self.stoneInput.setLayoutDirection(QtCore.Qt.LayoutDirection.RightToLeft)
        self.stoneInput.setAlignment(self._LINEEDIT_STYLE)
        self.stoneInput.setFont(self._set_Qfont("微軟正黑體", 12))
        self._set_Geo_and_Name(self.stoneInput, (140, 210, 70, 20), "stoneInput")

        # 開始按鈕
        self.startButton = QtWidgets.QPushButton(self.functionTab)
        self.startButton.setFont(self._set_Qfont("微軟正黑體", 12))
        self._set_Geo_and_Name(self.startButton, (140, 400, 100, 40), "startButton")
        self.startButton.setStyleSheet("")
        self.startButton.setDefault(False)
        self.startButton.setFlat(False)
        self.startButton.clicked.connect(self.start_button_event)

        # 文本顯示框
        self.logTextBrowser = QtWidgets.QTextBrowser(self.functionTab)
        self.logTextBrowser.setFont(self._set_Qfont("微軟正黑體", 12))
        self._set_Geo_and_Name(self.logTextBrowser, (40, 250, 200, 131), "logTextBrowser")

        return self.functionTab

    def _set_introduction_tab(self):
        self.introductionTab = QtWidgets.QWidget()
        self.introductionTab.setMinimumSize(QtCore.QSize(300, 450))
        self.introductionTab.setMaximumSize(QtCore.QSize(300, 450))
        self.introductionTab.setFont(self._set_Qfont("微軟正黑體", 12))
        self.introductionTab.setObjectName("introductionTab")

        self.textBrowser = QtWidgets.QTextBrowser(self.introductionTab)
        self._set_Geo_and_Name(self.textBrowser, (20, 200, 256, 192), "textBrowser")

        self.githubText = QtWidgets.QLabel(self.introductionTab)
        self.githubText.setFont(self._set_Qfont("微軟正黑體", 12))
        self._set_Geo_and_Name(self.githubText, (20, 20, 61, 20), "githubText")

        self.githubTextUrl = QtWidgets.QLabel(self.introductionTab)
        self.githubTextUrl.setFont(self._set_Qfont("微軟正黑體", 12))
        self._set_Geo_and_Name(self.githubTextUrl, (20, 40, 251, 41), "githubTextUrl")
        self.githubTextUrl.setScaledContents(False)
        self.githubTextUrl.setWordWrap(True)
        self.githubTextUrl.setOpenExternalLinks(True)

        return self.introductionTab

    def _retranslateUi(self, root):
        _translate = QtCore.QCoreApplication.translate
        root.setWindowTitle(_translate("Main", "第七史詩刷商店小工具"))
        self.covenantInput.setText(_translate("Main", "0"))
        self.mysticInput.setText(_translate("Main", "0"))
        self.moneyTextShowLabel.setText(_translate("Main", "金幣"))
        self.moneyTotalShowEdit.setText(_translate("Main", "0"))
        self.stoneTextShowLabel.setText(_translate("Main", "天空石"))
        self.stoneTotalShowEdit.setText(_translate("Main", "0"))
        self.startButton.setText(_translate("Main", "開始"))
        self.covenantTimeLabel.setText(_translate("Main", "次"))
        self.mysticTimeLabel.setText(_translate("Main", "次"))
        self.logTextBrowser.setHtml(
            _translate(
                "Main",
                '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">\n'
                '<html><head><meta name="qrichtext" content="1" /><style type="text/css">\n'
                "p, li { white-space: pre-wrap; }\n"
                "</style></head><body style=\" font-family:'微軟正黑體'; font-size:10pt; font-weight:400; font-style:normal;\">\n"
                '<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">毫無反應, 就是個小工具</p></body></html>',
            )
        )
        self.stoneTimeLabel.setText(_translate("Main", "個"))
        self.stoneInput.setText(_translate("Main", "0"))
        self.autoRestartDispatchCheckbox.setText(_translate("Main", "自動重新派遣"))
        self.covenantRadioButton.setText(_translate("Main", "聖約書籤"))
        self.mysticRadioButton.setText(_translate("Main", "神秘書籤"))
        self.stoneRadioButton.setText(_translate("Main", "天空石"))
        self.tabWidget.setTabText(
            self.tabWidget.indexOf(self.functionTab), _translate("Main", "功能")
        )
        self.textBrowser.setHtml(
            _translate(
                "Main",
                '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">\n'
                '<html><head><meta name="qrichtext" content="1" /><style type="text/css">\n'
                "p, li { white-space: pre-wrap; }\n"
                "</style></head><body style=\" font-family:'微軟正黑體'; font-size:12pt; font-weight:400; font-style:normal;\">\n"
                '<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">啟動條件:</p>\n'
                '<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">金幣至少280000元</p>\n'
                '<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">天空石至少3個</p>\n'
                '<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br /></p>\n'
                '<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">填的數字為停止的條件，</p>\n'
                '<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">刷到的神秘與聖約都會買，</p>\n'
                '<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">目前沒有只買某種的功能，</p>\n'
                '<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">未來也不會做。</p></body></html>',
            )
        )
        self.githubText.setText(_translate("Main", "原始碼來源(GitHub):"))
        self.githubTextUrl.setText(
            _translate(
                "Main",
                '<a href="https://www.github.com/steven010116/epic7autoBookmark">https://www.github.com/steven010116/epic7autoBookmark</a>',
            )
        )
        self.tabWidget.setTabText(
            self.tabWidget.indexOf(self.introductionTab), _translate("Main", "簡介")
        )

    def _constants(self):
        self._WINDOW_SIZE = (310, 500)
        self._MINIMUM = QtCore.QSize(*self._WINDOW_SIZE)
        self._MAXIMUM = QtCore.QSize(*map(lambda x: x*2, self._WINDOW_SIZE))
        self._LINEEDIT_STYLE = QtCore.Qt.AlignmentFlag.AlignRight \
            | QtCore.Qt.AlignmentFlag.AlignTrailing \
            | QtCore.Qt.AlignmentFlag.AlignVCenter

    def _set_Qfont(self, font: str, size: int):
        font_obj = QtGui.QFont()
        font_obj.setFamily(font)
        font_obj.setPointSize(size)
        return font_obj

    def _set_Geo_and_Name(self, widget: QtWidgets, geo: tuple, name: str):
        widget.setGeometry(QtCore.QRect(*geo))
        widget.setObjectName(name)

class Main(QtWidgets.QWidget, Ui_Part):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.start = False
        # 建立畫面
        self.setupUi(self)
        self.bind_worker()

    def start_button_event(self):
        self.start = not self.start

        if self.start:
            startMode = 0
            expectNum = 0
            moneyNum = get_number(self.moneyTotalShowEdit.text())
            stoneNum = get_number(self.stoneTotalShowEdit.text())
            autoRestartDispatch = self.autoRestartDispatchCheckbox.isChecked()

            if not moneyNum or not stoneNum:
                self.logTextBrowser.setText("")
                self.logTextBrowser.append("石頭或金幣輸入錯誤")
                self.logTextBrowser.append("===== 停止 =====")
                self.start = not self.start
                self._set_user_input_property()
                return

            if self.covenantRadioButton.isChecked():
                startMode = 1
                expectNum = get_number(self.covenantInput.text())
                self.covenantInput.setText(str(expectNum))
            elif self.mysticRadioButton.isChecked():
                startMode = 2
                expectNum = get_number(self.mysticInput.text())
                self.mysticInput.setText(str(expectNum))
            elif self.stoneRadioButton.isChecked():
                startMode = 3
                expectNum = get_number(self.stoneInput.text())
                self.stoneInput.setText(str(expectNum))
            else:
                self.logTextBrowser.append("沒有選取的radioButton,")
                self.logTextBrowser.append("明明就預設會選一個,")
                self.logTextBrowser.append("你是怎麼取消掉的? 能不能教我?")
                self.logTextBrowser.append("===== 停止 =====")
                self.start = not self.start
                self._set_user_input_property()
                return

            self.worker.setVariable(startMode, expectNum, moneyNum, stoneNum, autoRestartDispatch)
            self.worker.start()
        else:
            self._terminate_woker()
        self._set_user_input_property()

    def bind_worker(self):
        self.worker = worker()
        self.worker.isStart.connect(self._worker_start)
        self.worker.isFinish.connect(self._worker_stop)
        self.worker.isError.connect(self._worker_error)

        self.worker.emitLog.connect(lambda text: self.logTextBrowser.append(text))
        self.worker.emitMoney.connect(lambda text: self.moneyTotalShowEdit.setText(text))
        self.worker.emitStone.connect(lambda text: self.stoneTotalShowEdit.setText(text))

    def _worker_start(self):
        self.logTextBrowser.setText("")
        self._set_user_input_property()

    def _worker_stop(self):
        self.start = False
        self._set_user_input_property()

    def _worker_error(self):
        self.start = False
        self._set_user_input_property()

    def _terminate_woker(self):
        self.worker.terminate()
        self.logTextBrowser.append("===== 停止 =====")

    def _set_user_input_property(self):
        self.startButton.setText("停止" if self.start else "開始")
        self.covenantRadioButton.setDisabled(self.start)
        self.mysticRadioButton.setDisabled(self.start)
        self.stoneRadioButton.setDisabled(self.start)
        self.moneyTotalShowEdit.setDisabled(self.start)
        self.stoneTotalShowEdit.setDisabled(self.start)
        self.covenantInput.setDisabled(self.start)
        self.mysticInput.setDisabled(self.start)
        self.stoneInput.setDisabled(self.start)
        self.autoRestartDispatchCheckbox.setDisabled(self.start)

    # 讓空白鍵等同"開始"按鈕
    def keyPressEvent(self, event) -> None:
        print("callkeyPressEvent:", event)
        if event.key() != QtCore.Qt.Key.Key_Space:
            return
        self.start_button_event()

class worker(QtCore.QThread):
    isStart = QtCore.pyqtSignal()
    isProgress = QtCore.pyqtSignal(str)
    isFinish = QtCore.pyqtSignal()
    isError = QtCore.pyqtSignal()
    emitLog = QtCore.pyqtSignal(str)
    emitMoney = QtCore.pyqtSignal(str)
    emitStone = QtCore.pyqtSignal(str)

    def __init__(self):
        super().__init__()
        self._origin, self._window, self._monitor = get_window()
        # mss 為多執行續不友善，最好在使用時都重新實例化一次
        _mss = mss.mss()
        img = Window.capture_screen(_mss, self._monitor)
        self._window.show(img)
        global _hwnd
        print(_hwnd)

    def setVariable(self, startMode: int, expectNum: int, moneyNum: int, stoneNum: int, autoRestartDispatch: bool):
        self.startMode = startMode
        self.expectNum = expectNum
        self.moneyNum = moneyNum
        self.stoneNum = stoneNum
        self.autoRestartDispatch = autoRestartDispatch

    # 重新執行派遣任務
    def processDispatchMissionComplete(self, restartDispatchButton):
        if not self.autoRestartDispatch:
            return

        _mss = mss.mss()
        screenshot = Window.capture_screen(_mss, self._monitor)
        self._window.show(screenshot)
        condifence = 0.75
        restartDispatchButtonLocation = aircv.find_template(screenshot, restartDispatchButton, condifence)

        if restartDispatchButtonLocation:
            print("dispatch mission completed!")
            self.emitLog.emit("重新進行派遣任務")
            while True:
                restartDispatchFoundResult: tuple = restartDispatchButtonLocation["result"]
                Common.doubleClick(self._origin[0] + restartDispatchFoundResult[0],
                                   self._origin[1] + restartDispatchFoundResult[1])
                QtCore.QThread.sleep(1)
                Common.doubleClick(self._origin[0] + restartDispatchFoundResult[0],
                                   self._origin[1] + restartDispatchFoundResult[1])
                QtCore.QThread.sleep(1)
                after_restartDispatch_screenshot = Window.capture_screen(_mss, self._monitor)
                self._window.show(after_restartDispatch_screenshot)
                restartDispatchButtonLocationAfter = aircv.find_template(
                    after_restartDispatch_screenshot, restartDispatchButton, condifence
                )
                if not restartDispatchButtonLocationAfter:
                    break
            QtCore.QThread.sleep(1)

    def run(self):
        self.isStart.emit()
        print("startMode: ", self.startMode)
        print("expectedNum: ", self.expectNum)
        # check input
        if self.moneyNum < 280000:
            self.emitLog.emit("錯誤: 金幣不足28萬")
            raise ValueError("out of money")
        if self.stoneNum < 3:
            self.emitLog.emit("錯誤: 天空石不足以刷新商店")
            raise ValueError("out of stone")
        if self.startMode == 3 and self.expectNum > self.stoneNum:
            self.emitLog.emit("錯誤: 天空石使用數量大於持有數量")
            raise ValueError("stone input error")

        self.emitLog.emit("===== 初始化 =====")
        refreshTime = 0
        covenantFoundTime = 0
        mysticFoundTime = 0
        needRefresh = False
        covenantFound = False
        mysticFound = False
        _mss = mss.mss()
        QtCore.QThread.sleep(1)

        self.emitLog.emit("===== 刷商店 =====")
        while self.expectNum > 0 and self.moneyNum > 280000 and self.stoneNum >= 3:
            screenshot = Window.capture_screen(_mss, self._monitor)
            self._window.show(screenshot)

            ''' 聖約書籤 '''
            covenantLocation = aircv.find_template(screenshot, covenant, 0.9)
            print("covenant: ", covenantLocation)
            if covenantLocation and not covenantFound:
                covenantFound = True
                print("find covenant!")
                self.emitLog.emit("找到聖約書籤")
                while True:
                    covenantFoundResult: tuple = covenantLocation["result"]
                    # 點擊購買
                    Common.doubleClick(self._origin[0] + covenantFoundResult[0] + _distance_under_800_600_w,
                                       self._origin[1] + covenantFoundResult[1])
                    QtCore.QThread.sleep(1)
                    self.processDispatchMissionComplete(restartDispatchButton)
                    # 購買頁面
                    buy_screenshot = Window.capture_screen(_mss, self._monitor)
                    self._window.show(buy_screenshot)
                    buyButtonLocation = aircv.find_template(buy_screenshot, buyButton, 0.9)
                    print("buy_button:", buyButtonLocation)
                    # 確定購買
                    if buyButtonLocation:
                        buyButtonFoundResult: tuple = buyButtonLocation["result"]
                        while True:
                            Common.doubleClick(self._origin[0] + buyButtonFoundResult[0],
                                               self._origin[1] + buyButtonFoundResult[1])
                            QtCore.QThread.sleep(1)
                            self.processDispatchMissionComplete(restartDispatchButton)
                            after_buy_screenshot = Window.capture_screen(_mss, self._monitor)
                            self._window.show(after_buy_screenshot)
                            buyButtonLocationAfter = aircv.find_template(
                                after_buy_screenshot, buyButton, 0.9, True
                            )
                            print("buy_button_after:", buyButtonLocationAfter)
                            if not buyButtonLocationAfter:
                                break
                            QtCore.QThread.sleep(1)
                        if self.startMode == 1:
                            self.expectNum -= 1
                            self.emitLog.emit(f"剩餘次數: {self.expectNum}次")
                        self.moneyNum -= 184000
                        covenantFoundTime += 1
                        self.emitMoney.emit(str(self.moneyNum))
                        break
                    QtCore.QThread.sleep(1)
            else:
                print("not find covenant!")

            # 神秘書籤
            mysticLocation = aircv.find_template(screenshot, mystic, 0.9)
            print("mystic:", mysticLocation)
            if mysticLocation and not mysticFound:
                mysticFound = True
                print("find mystic!")
                self.emitLog.emit("找到神秘書籤")
                while True:
                    mysticFoundResult: tuple = mysticLocation["result"]
                    # 點擊購買
                    Common.doubleClick(self._origin[0] + mysticFoundResult[0] + _distance_under_800_600_w,
                                       self._origin[1] + mysticFoundResult[1])
                    QtCore.QThread.sleep(1)
                    self.processDispatchMissionComplete(restartDispatchButton)
                    # 購買頁面
                    buy_screenshot = Window.capture_screen(_mss, self._monitor)
                    self._window.show(buy_screenshot)
                    buyButtonLocation = aircv.find_template(buy_screenshot, buyButton, 0.9)
                    print("buy_button:", buyButtonLocation)
                    # 確定購買
                    if buyButtonLocation:
                        buyButtonFoundResult: tuple = buyButtonLocation["result"]
                        while True:
                            Common.doubleClick(self._origin[0] + buyButtonFoundResult[0],
                                               self._origin[1] + buyButtonFoundResult[1])
                            QtCore.QThread.sleep(1)
                            self.processDispatchMissionComplete(restartDispatchButton)
                            after_buy_screenshot = Window.capture_screen(_mss, self._monitor)
                            self._window.show(after_buy_screenshot)
                            buyButtonLocationAfter = aircv.find_template(
                                after_buy_screenshot, buyButton, 0.9, True
                            )
                            print("buy_button_after:", mysticLocation)
                            if not buyButtonLocationAfter:
                                break
                            QtCore.QThread.sleep(1)
                        if self.startMode == 2:
                            self.expectNum -= 1
                            self.emitLog.emit(f"剩餘次數: {self.expectNum}次")
                        self.moneyNum -= 280000
                        mysticFoundTime += 1
                        self.emitMoney.emit(str(self.moneyNum))
                        break
                    QtCore.QThread.sleep(1)
            else:
                print("not find mystic!")

            ''' 重新整理 '''
            if needRefresh:
                refreshButtonLocation = aircv.find_template(screenshot, refreshButton, 0.9)
                print("refresh: ", refreshButtonLocation)
                while True:
                    refreshButtonFoundResult: tuple = refreshButtonLocation["result"]
                    # 點擊重新整理
                    Common.doubleClick(self._origin[0] + refreshButtonFoundResult[0],
                                       self._origin[1] + refreshButtonFoundResult[1])
                    QtCore.QThread.sleep(1)
                    self.processDispatchMissionComplete(restartDispatchButton)
                    confirm_screenshot = Window.capture_screen(_mss, self._monitor)
                    self._window.show(confirm_screenshot)
                    refreshYesButtonLocation = aircv.find_template(
                        confirm_screenshot, refreshYesButton, 0.9
                    )
                    print("confirm_to_refresh:", refreshYesButtonLocation)
                    # 確定重整
                    if refreshYesButtonLocation:
                        refreshYesButtonFoundResult: tuple = refreshYesButtonLocation["result"]
                        while True:
                            Common.doubleClick(self._origin[0] + refreshYesButtonFoundResult[0],
                                               self._origin[1] + refreshYesButtonFoundResult[1])
                            QtCore.QThread.sleep(1)
                            self.processDispatchMissionComplete(restartDispatchButton)
                            after_click_yes_screenshot = Window.capture_screen(_mss, self._monitor)
                            self._window.show(after_click_yes_screenshot)
                            refreshYesButtonLocation = aircv.find_template(
                                after_click_yes_screenshot, refreshYesButton, 0.9
                            )
                            print("confirm_to_refresh_after:", refreshYesButtonLocation)
                            if not refreshYesButtonLocation:
                                break
                            QtCore.QThread.sleep(1)
                        self.stoneNum -= 3
                        self.emitStone.emit(str(self.stoneNum))
                        refreshTime += 1
                        if self.startMode == 3:
                            self.expectNum -= 3
                            self.emitLog.emit(f"剩餘次數: {int(self.expectNum/3)}次")
                        needRefresh = False
                        covenantFound = False
                        mysticFound = False
                        QtCore.QThread.sleep(1)
                        break
                    QtCore.QThread.sleep(1)
            else:
                Common.drag((self._origin[0] + 600, self._origin[1] + 300),
                            (self._origin[0] + 600, self._origin[1] + 100),
                            0.5)
                needRefresh = True
                QtCore.QThread.sleep(1)
                self.processDispatchMissionComplete(restartDispatchButton)

        # finished report
        self.emitLog.emit("===== 結算 =====")
        self.emitLog.emit("共花費:")
        self.emitLog.emit(f"天空石: {refreshTime*3}個")
        self.emitLog.emit(f"金幣: {covenantFoundTime*184000+mysticFoundTime*280000}元")
        self.emitLog.emit("獲得書籤:")
        self.emitLog.emit(f"聖約: {covenantFoundTime}次")
        self.emitLog.emit(f"神秘: {mysticFoundTime}次")

        self.isFinish.emit()


if __name__ == "__main__":
    app = QtWidgets.QApplication([__file__])
    app.setWindowIcon(QtGui.QIcon("main.ico"))

    # create GUI
    root = Main()
    root.show()

    sys.exit(app.exec())
