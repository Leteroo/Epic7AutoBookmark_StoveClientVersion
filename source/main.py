# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt6 UI code generator 6.1.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is run again.
# Do not edit this file unless you know what you are doing.

import sys
import time
import mss
import aircv
import win32gui
from PyQt6 import QtCore, QtGui, QtWidgets

sys.path.append("./api")

from CVWindow import Window
from WindowsOperation import Common

_COVENANT_COUNT_MODE = 1
_MYSTIC_COUNT_MODE = 2
_STONE_COUNT_MODE = 3
_ACCEPTED_WINDOW_WIDTH = 800
_ACCEPTED_WINDOW_HEIGHT = 600
# 目標到購買按鍵的距離
_WIDTH_TO_BUYBUTTON = 360

''' 待拆成 config '''
E7_language = "zh-tw"
E7_window_title = "第七史诗"

covenant_img = aircv.imread("./img/covenant_bookmark.png")
mystic_img = aircv.imread("./img/mystic_bookmark.png")
buy_button = aircv.imread("./img/buy_button.png")

refresh_button = aircv.imread("./img/refresh_button.png")
confirm_refresh_button = aircv.imread("./img/confirm_refresh_button.png")
redispatch_button = aircv.imread("./img/redispatch_button.png")

def catch_E7_window():
    _hwnd = win32gui.FindWindow(None, E7_window_title)
    if not _hwnd:
        print("找不到視窗!")
        return

    # 確保視窗正常展開(系統權限禍首-1)
    flag, show_cmd, minimum_size, maximum_size, normal_size = win32gui.GetWindowPlacement(_hwnd)
    if show_cmd != Common.WINDOW_STATUS["normal"]:
        print("restore window")
        win32gui.ShowWindow(_hwnd, Common.WINDOW_OPERATION["restore"])
        time.sleep(0.1)
    print("whole_window_size:", normal_size)

    # 取得正確原點
    inner_size = win32gui.GetClientRect(_hwnd)
    print("window_inner_size:", inner_size)
    origin_x, origin_y, width, height = Common.get_origin_and_size_of_inner(normal_size, inner_size)

    # 限制視窗大小，實際上會更小一點，因為客戶端有綁視窗比例
    if width != _ACCEPTED_WINDOW_WIDTH or height != _ACCEPTED_WINDOW_HEIGHT:
        win32gui.MoveWindow(_hwnd, normal_size[0], normal_size[1], 
                            _ACCEPTED_WINDOW_WIDTH, _ACCEPTED_WINDOW_HEIGHT, True)

    ''' 置頂與取消置頂(系統權限禍首-2，暫不使用) '''
    # if not Common.check_topmost(_hwnd):
    #     print("topmost")
    #     Common.topmost(_hwnd)
    # time.sleep(3)
    # print("dis topmost")
    # Common.dis_topmost(_hwnd)

    # window = Window("Capture", _ACCEPTED_WINDOW_WIDTH, _ACCEPTED_WINDOW_HEIGHT)
    monitor = Window.create_monitor(origin_x, origin_y, _ACCEPTED_WINDOW_WIDTH, _ACCEPTED_WINDOW_HEIGHT)

    # return (origin_x, origin_y), window, monitor
    return (origin_x, origin_y), monitor

def get_number(text):
    return int(text) if text.isdigit() else 0

class Worker(QtCore.QThread):
    isStart = QtCore.pyqtSignal()
    isProgress = QtCore.pyqtSignal(str)
    isFinish = QtCore.pyqtSignal()
    isError = QtCore.pyqtSignal()
    emitLog = QtCore.pyqtSignal(str)
    emitMoney = QtCore.pyqtSignal(str)
    emitStone = QtCore.pyqtSignal(str)

    def __init__(self):
        super().__init__()
        # self._origin, self._window, self._monitor = catch_E7_window()
        self._origin, self._monitor = catch_E7_window()
        # mss 為多執行續不友善，最好在使用時都重新實例化一次
        _mss = mss.mss()
        cur_screen = Window.capture_screen(_mss, self._monitor)
        # self._window.show(cur_screen)

    def set_variable(self, mode: int, qunatity: int, amount_of_money: int, amount_of_stone: int, redispatch: bool):
        self.mode = mode
        self.expected_quantity = qunatity
        self.amount_of_money = amount_of_money
        self.amount_of_stone = amount_of_stone
        self.redispatch = redispatch
    
    def run(self):
        self.isStart.emit()
        print("mode:", self.mode)
        print("expected_quantity:", self.expected_quantity)
        
        # check input
        if self.amount_of_money < 280000:
            self.emitLog.emit("錯誤: 金幣不足28萬")
            raise ValueError("out of money")
        if self.amount_of_stone < 3:
            self.emitLog.emit("錯誤: 天空石不足以刷新商店")
            raise ValueError("out of stone")
        if self.mode == _STONE_COUNT_MODE and self.expected_quantity > self.amount_of_stone:
            self.emitLog.emit("錯誤: 天空石使用數量大於持有數量")
            raise ValueError("stone input error")

        self.emitLog.emit("===== 初始化 =====")
        self._reset_counter()
        self._reset_flag()
        _mss = mss.mss()
        QtCore.QThread.sleep(1)

        self.emitLog.emit("===== 刷商店 =====")
        while self.expected_quantity > 0 and self.amount_of_money > 280000 and self.amount_of_stone >= 3:
            cur_screen = Window.capture_screen(_mss, self._monitor)
            # self._window.show(cur_screen)

            # 聖約書籤
            covenant_loc = aircv.find_template(cur_screen, covenant_img, 0.8)
            print("covenant_loc: ", covenant_loc)
            if covenant_loc and not self.find_covenant:
                self.find_covenant = True
                print("find covenant_img!")
                self.emitLog.emit("找到聖約書籤")
                self._buy_bookmark(covenant_loc, _COVENANT_COUNT_MODE, 184000, "covenant_found_times", _mss)
            else:
                print("not find covenant_img!")

            # 神秘書籤
            mystic_loc = aircv.find_template(cur_screen, mystic_img, 0.8)
            print("mystic_loc:", mystic_loc)
            if mystic_loc and not self.find_mystic:
                self.find_mystic = True
                print("find mystic_img!")
                self.emitLog.emit("找到神秘書籤")
                self._buy_bookmark(mystic_loc, _MYSTIC_COUNT_MODE, 280000, "mystic_found_times", _mss)
            else:
                print("not find mystic_img!")

            # 重整商品
            if self.need_refresh:
                refresh_button_loc = aircv.find_template(cur_screen, refresh_button, 0.8)
                print("refresh_button_loc: ", refresh_button_loc)
                self._refresh(refresh_button_loc, _mss)
            else:
                Common.drag((self._origin[0] + 600, self._origin[1] + 300),
                            (self._origin[0] + 600, self._origin[1] + 100), 0.5)
                self.need_refresh = True
                QtCore.QThread.sleep(1)
                self._redispatch_check(redispatch_button, _mss)

        # finished report
        self.emitLog.emit("===== 結算 =====")
        self.emitLog.emit("共花費:")
        self.emitLog.emit(f"天空石: {self.refresh_times*3}個")
        self.emitLog.emit(f"金幣: {self.covenant_found_times*184000 + self.mystic_found_times*280000}元")
        self.emitLog.emit("獲得書籤:")
        self.emitLog.emit(f"聖約: {self.covenant_found_times}次")
        self.emitLog.emit(f"神秘: {self.mystic_found_times}次")

        self.isFinish.emit()

    # 重新執行派遣任務
    def _redispatch_check(self, redispatch_button, mss):
        if not self.redispatch:
            return

        cur_screen = Window.capture_screen(mss, self._monitor)
        # self._window.show(cur_screen)
        redispatch_button_loc = aircv.find_template(cur_screen, redispatch_button, 0.8)

        if redispatch_button_loc:
            print("Redispatching...")
            self.emitLog.emit("重新進行派遣任務")
            center_x, center_y = redispatch_button_loc["result"]
            self._click_button(center_x, center_y, _mss, redispatch_button, "redispatch_button")
            print("Finish.")
            self.emitLog.emit("派遣完成")

    def _buy_bookmark(self, loc, mode, cost, attr_name_of_found_times, mss):
        while True:
            # 第一次點擊
            center_x, center_y = loc["result"]
            Common.double_click(self._origin[0] + center_x + _WIDTH_TO_BUYBUTTON,
                               self._origin[1] + center_y)
            QtCore.QThread.sleep(1)
            self._redispatch_check(redispatch_button, mss)
            # 二次確認
            cur_screen = Window.capture_screen(mss, self._monitor)
            # self._window.show(cur_screen)
            buy_button_loc = aircv.find_template(cur_screen, buy_button, 0.8)
            print("buy_button_loc:", buy_button_loc)
            if not self._confirm_paying(buy_button_loc, mode, cost, mss):
                cur_times = getattr(self, attr_name_of_found_times)
                setattr(self, attr_name_of_found_times, cur_times + 1)
                self.emitMoney.emit(str(self.amount_of_money))
                break
            QtCore.QThread.sleep(1)

    def _confirm_paying(self, loc, mode, cost, mss) -> int:
        if not loc:
            return -1
        center_x, center_y = loc["result"]
        self._click_button(center_x, center_y, mss, buy_button, "buy_button")
        if self.mode == mode:
            self.expected_quantity -= 1
            self.emitLog.emit(f"剩餘次數: {self.expected_quantity}次")
        self.amount_of_money -= cost
        return 0
    
    def _refresh(self, loc, mss):
        while True:
            center_x, center_y = loc["result"]
            # 第一次點擊
            Common.double_click(self._origin[0] + center_x, self._origin[1] + center_y)
            QtCore.QThread.sleep(1)
            self._redispatch_check(redispatch_button, mss)
            # 二次確認
            cur_screen = Window.capture_screen(mss, self._monitor)
            # self._window.show(cur_screen)
            confirm_refresh_button_loc = aircv.find_template(cur_screen, confirm_refresh_button, 0.8)
            print("refresh_button_after_click:", confirm_refresh_button_loc)
            if not self._confirm_refreshing(confirm_refresh_button_loc, mss):
                QtCore.QThread.sleep(1)
                break
            QtCore.QThread.sleep(1)
    
    def _confirm_refreshing(self, loc, mss) -> int:
        if not loc:
            return -1
        center_x, center_y = loc["result"]
        self._click_button(center_x, center_y, mss, confirm_refresh_button, "confirm_refresh_button")
        if self.mode == _STONE_COUNT_MODE:
            self.expected_quantity -= 3
            self.emitLog.emit(f"剩餘次數: {int(self.expected_quantity/3)}次")

        self.amount_of_stone -= 3
        self.emitStone.emit(str(self.amount_of_stone))
        self.refresh_times += 1
        self._reset_flag()
        return 0
    
    def _click_button(self, x, y, mss, button_img, button_name):
        while True:
            Common.double_click(self._origin[0] + x, self._origin[1] + y)
            QtCore.QThread.sleep(1)
            self._redispatch_check(redispatch_button, mss)
            
            cur_screen = Window.capture_screen(mss, self._monitor)
            # self._window.show(cur_screen)
            button_loc_after_click = aircv.find_template(cur_screen, button_img, 0.8)
            print(f"{button_name}_loc_after_click:", button_loc_after_click)
            
            if not button_loc_after_click:
                return
            QtCore.QThread.sleep(1)
    
    def _reset_counter(self):
        self.refresh_times = 0
        self.covenant_found_times = 0
        self.mystic_found_times = 0
        
    def _reset_flag(self):
        self.need_refresh = False
        self.find_covenant = False
        self.find_mystic = False

class UIPart:
    def __init__(self):
        self._constants()

    # 需要實作的 event
    def start_button_event(self):
        pass

    def set_UI(self, root: QtWidgets):
        root.setObjectName("widget")
        root.resize(*self._WINDOW_SIZE)
        root.setMinimumSize(self._MINIMUM)
        root.setMaximumSize(self._MAXIMUM)
        root.setFont(self._set_Qfont("微軟正黑體", 12))

        self.tabWidget = QtWidgets.QTabWidget(root)
        self.tabWidget.setMinimumSize(QtCore.QSize(300, 490))
        self.tabWidget.setMaximumSize(QtCore.QSize(300, 490))
        self.tabWidget.setStyleSheet("")
        self.tabWidget.setFont(self._set_Qfont("微軟正黑體", 12))
        self._set_Geo_and_Name(self.tabWidget, (5, 5, 300, 490), "tabWidget")

        self.tabWidget.addTab(self._set_function_tab(), "")
        self.tabWidget.addTab(self._set_introduction_tab(), "")

        self._retranslateUi(root)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(root)

    def _set_function_tab(self):
        self.functionTab = QtWidgets.QWidget()
        self.functionTab.setMinimumSize(QtCore.QSize(300, 490))
        self.functionTab.setMaximumSize(QtCore.QSize(300, 490))
        self.functionTab.setFont(self._set_Qfont("微軟正黑體", 12))
        self.functionTab.setObjectName("functionTab")

        # 金幣標籤
        self.moneyTextShowLabel = QtWidgets.QLabel(self.functionTab)
        self.moneyTextShowLabel.setFont(self._set_Qfont("微軟正黑體", 12))
        self._set_Geo_and_Name(self.moneyTextShowLabel, (40, 10, 60, 20), "moneyTextShowLabel")

        # 金幣輸入
        self.moneyTotalShowEdit = QtWidgets.QLineEdit(self.functionTab)
        self.moneyTotalShowEdit.setLayoutDirection(QtCore.Qt.LayoutDirection.RightToLeft)
        self.moneyTotalShowEdit.setAlignment(self._LINEEDIT_STYLE)
        self.moneyTotalShowEdit.setFont(self._set_Qfont("微軟正黑體", 12))
        self._set_Geo_and_Name(self.moneyTotalShowEdit, (120, 10, 111, 20), "moneyTotalShowEdit")

        # 天空石標籤
        self.stoneTextShowLabel = QtWidgets.QLabel(self.functionTab)
        self.stoneTextShowLabel.setFont(self._set_Qfont("微軟正黑體", 12))
        self._set_Geo_and_Name(self.stoneTextShowLabel, (40, 40, 60, 20), "stoneTextShowLabel")

        # 天空石輸入
        self.stoneTotalShowEdit = QtWidgets.QLineEdit(self.functionTab)
        self.stoneTotalShowEdit.setLayoutDirection(QtCore.Qt.LayoutDirection.RightToLeft)
        self.stoneTotalShowEdit.setAlignment(self._LINEEDIT_STYLE)
        self.stoneTotalShowEdit.setFont(self._set_Qfont("微軟正黑體", 12))
        self._set_Geo_and_Name(self.stoneTotalShowEdit, (120, 40, 111, 20), "stoneTotalShowEdit")

        # 分隔線
        self.divider = QtWidgets.QFrame(self.functionTab)
        self.divider.setFrameShape(QtWidgets.QFrame.Shape.HLine)
        self.divider.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self._set_Geo_and_Name(self.divider, (10, 65, 271, 20), "divider")

        # 自動重新派遣
        self.autoRestartDispatchCheckbox = QtWidgets.QCheckBox(self.functionTab)
        self._set_Geo_and_Name(self.autoRestartDispatchCheckbox, (40, 90, 150, 21), "autoRestartDispatchCheckbox")
        self.autoRestartDispatchCheckbox.setChecked(False)

        # 聖約書籤 Button
        self.covenantRadioButton = QtWidgets.QRadioButton(self.functionTab)
        self._set_Geo_and_Name(self.covenantRadioButton, (40, 130, 91, 21), "covenantRadioButton")
        self.covenantRadioButton.setChecked(True)

        # 聖約書籤標籤
        self.covenantTimeLabel = QtWidgets.QLabel(self.functionTab)
        self._set_Geo_and_Name(self.covenantTimeLabel, (220, 130, 20, 20), "covenantTimeLabel")

        # 聖約書籤輸入
        self.covenantInput = QtWidgets.QLineEdit(self.functionTab)
        self.covenantInput.setLayoutDirection(QtCore.Qt.LayoutDirection.RightToLeft)
        self.covenantInput.setAlignment(self._LINEEDIT_STYLE)
        self.covenantInput.setFont(self._set_Qfont("微軟正黑體", 12))
        self._set_Geo_and_Name(self.covenantInput, (140, 130, 70, 20), "covenantInput")

        # 神秘書籤 Button
        self.mysticRadioButton = QtWidgets.QRadioButton(self.functionTab)
        self._set_Geo_and_Name(self.mysticRadioButton, (40, 170, 91, 21), "mysticRadioButton")

        # 神秘書籤標籤
        self.mysticTimeLabel = QtWidgets.QLabel(self.functionTab)
        self._set_Geo_and_Name(self.mysticTimeLabel, (220, 170, 20, 20), "mysticTimeLabel")

        # 神秘書籤輸入
        self.mysticInput = QtWidgets.QLineEdit(self.functionTab)
        self.mysticInput.setLayoutDirection(QtCore.Qt.LayoutDirection.RightToLeft)
        self.mysticInput.setAlignment(self._LINEEDIT_STYLE)
        self.mysticInput.setFont(self._set_Qfont("微軟正黑體", 12))
        self._set_Geo_and_Name(self.mysticInput, (140, 170, 70, 20), "mysticInput")

        # 天空石 Button
        self.stoneRadioButton = QtWidgets.QRadioButton(self.functionTab)
        self._set_Geo_and_Name(self.stoneRadioButton, (40, 210, 91, 21), "stoneRadioButton")

        # 天空石標籤
        self.stoneTimeLabel = QtWidgets.QLabel(self.functionTab)
        self._set_Geo_and_Name(self.stoneTimeLabel, (220, 210, 20, 20), "stoneTimeLabel")

        # 天空石輸入
        self.stoneInput = QtWidgets.QLineEdit(self.functionTab)
        self.stoneInput.setLayoutDirection(QtCore.Qt.LayoutDirection.RightToLeft)
        self.stoneInput.setAlignment(self._LINEEDIT_STYLE)
        self.stoneInput.setFont(self._set_Qfont("微軟正黑體", 12))
        self._set_Geo_and_Name(self.stoneInput, (140, 210, 70, 20), "stoneInput")

        # 開始按鈕
        self.startButton = QtWidgets.QPushButton(self.functionTab)
        self.startButton.setFont(self._set_Qfont("微軟正黑體", 12))
        self._set_Geo_and_Name(self.startButton, (140, 400, 100, 40), "startButton")
        self.startButton.setStyleSheet("")
        self.startButton.setDefault(False)
        self.startButton.setFlat(False)
        self.startButton.clicked.connect(self.start_button_event)

        # 文本顯示框
        self.logTextBrowser = QtWidgets.QTextBrowser(self.functionTab)
        self.logTextBrowser.setFont(self._set_Qfont("微軟正黑體", 12))
        self._set_Geo_and_Name(self.logTextBrowser, (40, 250, 200, 131), "logTextBrowser")

        return self.functionTab

    def _set_introduction_tab(self):
        self.introductionTab = QtWidgets.QWidget()
        self.introductionTab.setMinimumSize(QtCore.QSize(300, 450))
        self.introductionTab.setMaximumSize(QtCore.QSize(300, 450))
        self.introductionTab.setFont(self._set_Qfont("微軟正黑體", 12))
        self.introductionTab.setObjectName("introductionTab")

        self.textBrowser = QtWidgets.QTextBrowser(self.introductionTab)
        self._set_Geo_and_Name(self.textBrowser, (20, 200, 256, 192), "textBrowser")

        self.githubText = QtWidgets.QLabel(self.introductionTab)
        self.githubText.setFont(self._set_Qfont("微軟正黑體", 12))
        self._set_Geo_and_Name(self.githubText, (20, 20, 61, 20), "githubText")

        self.githubTextUrl = QtWidgets.QLabel(self.introductionTab)
        self.githubTextUrl.setFont(self._set_Qfont("微軟正黑體", 12))
        self._set_Geo_and_Name(self.githubTextUrl, (20, 40, 251, 41), "githubTextUrl")
        self.githubTextUrl.setScaledContents(False)
        self.githubTextUrl.setWordWrap(True)
        self.githubTextUrl.setOpenExternalLinks(True)

        return self.introductionTab

    def _retranslateUi(self, root):
        _translate = QtCore.QCoreApplication.translate
        root.setWindowTitle(_translate("Main", "第七史詩刷商店小工具"))
        self.covenantInput.setText(_translate("Main", "0"))
        self.mysticInput.setText(_translate("Main", "0"))
        self.moneyTextShowLabel.setText(_translate("Main", "金幣"))
        self.moneyTotalShowEdit.setText(_translate("Main", "0"))
        self.stoneTextShowLabel.setText(_translate("Main", "天空石"))
        self.stoneTotalShowEdit.setText(_translate("Main", "0"))
        self.startButton.setText(_translate("Main", "開始"))
        self.covenantTimeLabel.setText(_translate("Main", "次"))
        self.mysticTimeLabel.setText(_translate("Main", "次"))
        self.logTextBrowser.setHtml(
            _translate(
                "Main",
                '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">\n'
                '<html><head><meta name="qrichtext" content="1" /><style type="text/css">\n'
                "p, li { white-space: pre-wrap; }\n"
                "</style></head><body style=\" font-family:'微軟正黑體'; font-size:10pt; font-weight:400; font-style:normal;\">\n"
                '<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">毫無反應, 就是個小工具</p></body></html>',
            )
        )
        self.stoneTimeLabel.setText(_translate("Main", "個"))
        self.stoneInput.setText(_translate("Main", "0"))
        self.autoRestartDispatchCheckbox.setText(_translate("Main", "自動重新派遣"))
        self.covenantRadioButton.setText(_translate("Main", "聖約書籤"))
        self.mysticRadioButton.setText(_translate("Main", "神秘書籤"))
        self.stoneRadioButton.setText(_translate("Main", "天空石"))
        self.tabWidget.setTabText(
            self.tabWidget.indexOf(self.functionTab), _translate("Main", "功能")
        )
        self.textBrowser.setHtml(
            _translate(
                "Main",
                '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">\n'
                '<html><head><meta name="qrichtext" content="1" /><style type="text/css">\n'
                "p, li { white-space: pre-wrap; }\n"
                "</style></head><body style=\" font-family:'微軟正黑體'; font-size:12pt; font-weight:400; font-style:normal;\">\n"
                '<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">啟動條件:</p>\n'
                '<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">金幣至少280000元</p>\n'
                '<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">天空石至少3個</p>\n'
                '<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br /></p>\n'
                '<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">填的數字為停止的條件，</p>\n'
                '<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">刷到的神秘與聖約都會買，</p>\n'
                '<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">目前沒有只買某種的功能，</p>\n'
                '<p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">未來也不會做。</p></body></html>',
            )
        )
        self.githubText.setText(_translate("Main", "原始碼來源(GitHub):"))
        self.githubTextUrl.setText(
            _translate(
                "Main",
                '<a href="https://www.github.com/steven010116/epic7autoBookmark">https://www.github.com/steven010116/epic7autoBookmark</a>',
            )
        )
        self.tabWidget.setTabText(
            self.tabWidget.indexOf(self.introductionTab), _translate("Main", "簡介")
        )

    def _constants(self):
        self._WINDOW_SIZE = (310, 500)
        self._MINIMUM = QtCore.QSize(*self._WINDOW_SIZE)
        self._MAXIMUM = QtCore.QSize(*map(lambda x: x*2, self._WINDOW_SIZE))
        self._LINEEDIT_STYLE = QtCore.Qt.AlignmentFlag.AlignRight \
            | QtCore.Qt.AlignmentFlag.AlignTrailing \
            | QtCore.Qt.AlignmentFlag.AlignVCenter

    def _set_Qfont(self, font: str, size: int):
        font_obj = QtGui.QFont()
        font_obj.setFamily(font)
        font_obj.setPointSize(size)
        return font_obj

    def _set_Geo_and_Name(self, widget: QtWidgets, geo: tuple, name: str):
        widget.setGeometry(QtCore.QRect(*geo))
        widget.setObjectName(name)

class Main(QtWidgets.QWidget, UIPart):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.start = False
        # 建立畫面
        self.set_UI(self)
        self.bind_worker()

    def start_button_event(self):
        self.start = not self.start

        if self.start:
            selected_mode = 0
            expected_times = 0
            amount_of_money = get_number(self.moneyTotalShowEdit.text())
            amount_of_stone = get_number(self.stoneTotalShowEdit.text())
            if_redispatch = self.autoRestartDispatchCheckbox.isChecked()

            if not amount_of_money or not amount_of_stone:
                self.logTextBrowser.setText("")
                self.logTextBrowser.append("石頭或金幣輸入錯誤")
                self.logTextBrowser.append("===== 停止 =====")
                self.start = not self.start
                self._set_user_input_property()
                return

            if self.covenantRadioButton.isChecked():
                selected_mode = _COVENANT_COUNT_MODE
                expected_times = get_number(self.covenantInput.text())
                self.covenantInput.setText(str(expected_times))
            elif self.mysticRadioButton.isChecked():
                selected_mode = _MYSTIC_COUNT_MODE
                expected_times = get_number(self.mysticInput.text())
                self.mysticInput.setText(str(expected_times))
            elif self.stoneRadioButton.isChecked():
                selected_mode = _STONE_COUNT_MODE
                expected_times = get_number(self.stoneInput.text())
                self.stoneInput.setText(str(expected_times))
            else:
                self.logTextBrowser.append("沒有選取的radioButton,")
                self.logTextBrowser.append("明明就預設會選一個,")
                self.logTextBrowser.append("你是怎麼取消掉的? 能不能教我?")
                self.logTextBrowser.append("===== 停止 =====")
                self.start = not self.start
                self._set_user_input_property()
                return

            self.worker.set_variable(selected_mode, expected_times, amount_of_money, amount_of_stone, if_redispatch)
            self.worker.start()
        else:
            self._terminate_woker()
        self._set_user_input_property()

    def bind_worker(self):
        self.worker = Worker()
        self.worker.isStart.connect(self._worker_start)
        self.worker.isFinish.connect(self._worker_stop)
        self.worker.isError.connect(self._worker_error)

        self.worker.emitLog.connect(lambda text: self.logTextBrowser.append(text))
        self.worker.emitMoney.connect(lambda text: self.moneyTotalShowEdit.setText(text))
        self.worker.emitStone.connect(lambda text: self.stoneTotalShowEdit.setText(text))

    def _worker_start(self):
        self.logTextBrowser.setText("")
        self._set_user_input_property()

    def _worker_stop(self):
        self.start = False
        self._set_user_input_property()

    def _worker_error(self):
        self.start = False
        self._set_user_input_property()

    def _terminate_woker(self):
        self.worker.terminate()
        self.logTextBrowser.append("===== 停止 =====")

    def _set_user_input_property(self):
        self.startButton.setText("停止" if self.start else "開始")
        self.covenantRadioButton.setDisabled(self.start)
        self.mysticRadioButton.setDisabled(self.start)
        self.stoneRadioButton.setDisabled(self.start)
        self.moneyTotalShowEdit.setDisabled(self.start)
        self.stoneTotalShowEdit.setDisabled(self.start)
        self.covenantInput.setDisabled(self.start)
        self.mysticInput.setDisabled(self.start)
        self.stoneInput.setDisabled(self.start)
        self.autoRestartDispatchCheckbox.setDisabled(self.start)

    # 空白鍵綁定"開始"鍵
    def keyPressEvent(self, event) -> None:
        print("callkeyPressEvent:", event)
        if event.key() != QtCore.Qt.Key.Key_Space:
            return
        self.start_button_event()

if __name__ == "__main__":
    app = QtWidgets.QApplication([__file__])
    app.setWindowIcon(QtGui.QIcon("main.ico"))

    # create GUI
    root = Main()
    root.show()

    sys.exit(app.exec())
